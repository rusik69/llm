name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        binary_name="llm-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}${{ matrix.ext }}"
        go build -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}" -o "dist/$binary_name" main.go
        
        # Create a tarball for non-Windows binaries
        if [ "${{ matrix.goos }}" != "windows" ]; then
          tar -czf "dist/llm-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz" -C dist "$binary_name"
        else
          # Create a zip for Windows
          cd dist && zip "llm-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.zip" "$binary_name" && cd ..
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.name }}
        path: dist/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -la

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: LLM ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## What's New in ${{ steps.get_version.outputs.VERSION }}
          
          ### Features
          - Simple LLM implementation in Go
          - Transformer architecture with self-attention
          - Wikipedia data integration
          - Advanced text generation with repetition control
          - Temperature, top-k, and top-p sampling
          - Model persistence (save/load)
          - Comprehensive CLI interface
          
          ### Downloads
          Choose the binary for your platform:
          - **Linux AMD64**: `llm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `llm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz`
          - **macOS Intel**: `llm-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `llm-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz`
          - **Windows**: `llm-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip`
          
          ### Usage
          ```bash
          # Extract the archive and run
          ./llm -mode=train -epochs=10
          ./llm -mode=generate -text="Hello world" -temperature=0.8
          ```
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for full documentation.
        draft: false
        prerelease: false

    - name: Upload Linux AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-linux-amd64/llm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
        asset_name: llm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-linux-arm64/llm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz
        asset_name: llm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS Intel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-darwin-amd64/llm-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz
        asset_name: llm-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS Apple Silicon
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-darwin-arm64/llm-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz
        asset_name: llm-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-windows-amd64/llm-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip
        asset_name: llm-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip
        asset_content_type: application/zip 