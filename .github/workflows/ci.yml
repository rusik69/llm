name: Build Test Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: write

jobs:
  pipeline:
    name: Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Tidy modules
      run: go mod tidy

    - name: Build packages
      run: go build ./...

    - name: Format check
      run: make fmt

    - name: Lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

    - name: Run tests
      run: make test

    - name: Run tests with race detection
      run: make test-race

    - name: Run integration tests
      run: make test-integration

    - name: Build binary
      run: make build

    - name: Test binary
      run: ./shittyllm --help

    - name: Test Wikipedia integration
      run: |
        # Test sample Wikipedia data processing
        ./shittyllm -mode=download -sample=true -datadir=wiki_test -maxarticles=5
        
        # Verify training data was created
        if [ ! -f "wiki_test/training_data.txt" ]; then
          echo "Training data file not created"
          exit 1
        fi
        
        # Quick training test
        ./shittyllm -mode=train -data=wiki_test/training_data.txt -epochs=2 -lr=0.001
        
        # Test generation
        ./shittyllm -mode=generate -text="Science" -maxtokens=10 -temperature=0.8

    # Release steps (only run on tags)
    - name: Get version from tag
      if: startsWith(github.ref, 'refs/tags/')
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build release binaries
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p dist
        
        # Build Linux AMD64
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 make build
        mv shittyllm "dist/shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64"
        
        # Build Linux ARM64
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 make build
        mv shittyllm "dist/shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-arm64"
        
        # Create tarballs
        cd dist
        tar -czf "shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz" "shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64"
        tar -czf "shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz" "shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-arm64"

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: ShittyLLM ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## What's New in ${{ steps.get_version.outputs.VERSION }}
          
          ### Features
          - Simple LLM implementation in Go
          - Transformer architecture with self-attention
          - Wikipedia data integration
          - Advanced text generation with repetition control
          - Temperature, top-k, and top-p sampling
          - Model persistence (save/load)
          - Comprehensive CLI interface
          
          ### Downloads
          Choose the binary for your Linux platform:
          - **Linux AMD64**: `shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz`
          
          ### Usage
          ```bash
          # Extract and run
          tar -xzf shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
          ./shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64 -mode=train -epochs=10
          ./shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64 -mode=generate -text="Hello world"
          ```
        files: |
          dist/shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
          dist/shittyllm-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }} 